package ${basePackage}.web.controller.${moduleName};

import java.util.List;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.enums.BusinessType;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.utils.poi.ExcelUtil;
#if($table.crud)
import com.ruoyi.common.core.page.TableDataInfo;
#elseif($table.tree)
import com.ruoyi.common.utils.StringUtils;
import com.ruoyi.common.core.domain.Ztree;
#end
#foreach ($column in $joinColumns)
#if($column.joinType==1)
import ${column.targetPackageName}.service.I${column.targetClassName}Service;
import ${column.targetPackageName}.domain.${column.targetClassName};
#elseif($column.joinType==2)
import ${column.targetPackageName}.service.I${column.targetClassName}Service;
import ${column.joinPackageName}.service.I${column.joinClassName}Service;
#elseif($column.joinType==3)
import ${column.joinPackageName}.service.I${column.joinClassName}Service;
#end
#end

/**
 * ${functionName}Controller
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Controller
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController
{
    private String prefix = "${moduleName}/${businessName}";

    @Autowired
    private I${ClassName}Service ${className}Service;
#foreach ($column in $joinColumns)
#if($column.joinType==1)
    @Autowired
    private I${column.targetClassName}Service ${column.targetBusinessName}Service;
#elseif($column.joinType==2)
    @Autowired
    private I${column.targetClassName}Service ${column.targetBusinessName}Service;
    @Autowired
    private I${column.joinClassName}Service ${column.joinBusinessName}Service;
#elseif($column.joinType==3)
    @Autowired
    private I${column.joinClassName}Service ${column.joinBusinessName}Service;
#end
#end

#if($tplCategory!="join")

    @RequiresPermissions("${permissionPrefix}:view")
    @GetMapping()
    public String ${businessName}(ModelMap mmap)
    {
#foreach ($column in $joinColumns)
#if($column.joinType==1&&$column.htmlType!="tree")
        mmap.put("${column.targetBusinessName}s", ${column.targetBusinessName}Service.select${column.targetClassName}All());
#end
#end
        return prefix + "/${businessName}";
    }

#if($table.tree)
    /**
     * 查询${functionName}树列表
     */
    @RequiresPermissions("${permissionPrefix}:list")
    @PostMapping("/list")
    @ResponseBody
    public List<${ClassName}> list(${ClassName} ${className})
    {
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        return list;
    }
#elseif($table.crud)
    /**
     * 查询${functionName}列表
     */
    @RequiresPermissions("${permissionPrefix}:list")
    @PostMapping("/list")
    @ResponseBody
    public TableDataInfo list(${ClassName} ${className})
    {
        startPage();
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        return getDataTable(list);
    }
#end

    /**
     * 导出${functionName}列表
     */
    @RequiresPermissions("${permissionPrefix}:export")
    @PostMapping("/export")
    @ResponseBody
    public AjaxResult export(${ClassName} ${className})
    {
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        ExcelUtil<${ClassName}> util = new ExcelUtil<${ClassName}>(${ClassName}.class);
        return util.exportExcel(list, "${businessName}");
    }

#if($table.crud)
    /**
     * 新增${functionName}
     */
    @GetMapping("/add")
    public String add(ModelMap mmap)
    {
#foreach ($column in $joinColumns)
#if($column.joinType==1&&$column.htmlType!="tree")
        mmap.put("${column.targetBusinessName}s", ${column.targetBusinessName}Service.select${column.targetClassName}All());
#elseif($column.joinType==2&&$column.htmlType!="checktree")
        mmap.put("${column.targetBusinessName}s", ${column.targetBusinessName}Service.select${column.targetClassName}All());
#end
#end
        return prefix + "/add";
    }
#elseif($table.tree)
    /**
     * 新增${functionName}
     */
    @GetMapping(value = { "/add/{${pkColumn.javaField}}", "/add/" })
    public String add(@PathVariable(value = "${pkColumn.javaField}", required = false) Long ${pkColumn.javaField}, ModelMap mmap)
    {
        if (StringUtils.isNotNull(${pkColumn.javaField}))
        {
            mmap.put("${className}", ${className}Service.select${ClassName}ById(${pkColumn.javaField}));
        }
        return prefix + "/add";
    }
#end

    /**
     * 新增保存${functionName}
     */
    @RequiresPermissions("${permissionPrefix}:add")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping("/add")
    @ResponseBody
    public AjaxResult addSave(${ClassName} ${className})
    {
        return toAjax(${className}Service.insert${ClassName}(${className}));
    }

    /**
     * 修改${functionName}
     */
    @GetMapping("/edit/{${pkColumn.javaField}}")
    public String edit(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}, ModelMap mmap)
    {
#foreach ($column in $joinColumns)
#if($column.joinType==1)
        mmap.put("${column.targetBusinessName}s", ${column.targetBusinessName}Service.select${column.targetClassName}All());
#elseif($column.joinType==2&&$column.htmlType!="checktree")
#set($TargetBusinessName=$column.targetBusinessName.substring(0,1).toUpperCase() + ${column.targetBusinessName.substring(1)})
#set($TargetJavaField=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
        mmap.put("${column.targetBusinessName}s", ${column.joinBusinessName}Service.select${TargetBusinessName}sBy${TargetJavaField}(${column.javaField}));
#end
#end
        ${ClassName} ${className} = ${className}Service.select${ClassName}ById(${pkColumn.javaField});
        mmap.put("${className}", ${className});
        return prefix + "/edit";
    }

    /**
     * 修改保存${functionName}
     */
    @RequiresPermissions("${permissionPrefix}:edit")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PostMapping("/edit")
    @ResponseBody
    public AjaxResult editSave(${ClassName} ${className})
    {
        return toAjax(${className}Service.update${ClassName}(${className}));
    }

#if($table.crud)
    /**
     * 删除${functionName}
     */
    @RequiresPermissions("${permissionPrefix}:remove")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @PostMapping( "/remove")
    @ResponseBody
    public AjaxResult remove(String ids)
    {
        return toAjax(${className}Service.delete${ClassName}ByIds(ids));
    }
#elseif($table.tree)
    /**
     * 删除
     */
    @RequiresPermissions("${permissionPrefix}:remove")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @GetMapping("/remove/{${pkColumn.javaField}}")
    @ResponseBody
    public AjaxResult remove(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField})
    {
        return toAjax(${className}Service.delete${ClassName}ById(${pkColumn.javaField}));
    }
#end
#if($table.tree)

    /**
     * 非选择${functionName}树面板
     */
#set($BusinessName=$businessName.substring(0,1).toUpperCase() + ${businessName.substring(1)})
    @GetMapping(value = { "/select${BusinessName}Tree/{${pkColumn.javaField}}", "/select${BusinessName}Tree/" })
    public String select${BusinessName}Tree(@PathVariable(value = "${pkColumn.javaField}", required = false) Long ${pkColumn.javaField}, ModelMap mmap)
    {
        if (StringUtils.isNotNull(${pkColumn.javaField}))
        {
            mmap.put("${className}", ${className}Service.select${ClassName}ById(${pkColumn.javaField}));
        }
        return prefix + "/tree";
    }
    /**
     * 加载${functionName}非选择树列表
     */
    @GetMapping("/treeData")
    @ResponseBody
    public List<Ztree> treeData()
    {
        List<${ClassName}> ${className}List =${className}Service.select${ClassName}All();
        List<Ztree> ztrees = ${className}Service.generate${ClassName}TreeDate(${className}List,false);;
        return ztrees;
    }
#foreach ($column in $joinColumns)
#set($BusinessName=$businessName.substring(0,1).toUpperCase() + ${businessName.substring(1)})
#set($TargetJavaField=$column.targetJavaField.substring(0,1).toUpperCase() + ${column.targetJavaField.substring(1)})
    /**
     * 加载${functionName}选择树列表
     */
    @GetMapping(value = { "/${column.joinBusinessName}TreeData/{${column.targetJavaField}}", "/${column.joinBusinessName}TreeData" })
    @ResponseBody
    public List<Ztree> ${column.joinBusinessName}TreeData(@PathVariable(value = "${column.targetJavaField}", required = false) Long ${column.targetJavaField}, ModelMap mmap)
    {
        List<${ClassName}> ${className}List=null;
        if (StringUtils.isNotNull(${column.targetJavaField}))
        {
           ${className}List=${column.joinBusinessName}Service.select${BusinessName}sBy${TargetJavaField}(${column.targetJavaField});
        }
        else
        {
           ${className}List=${className}Service.select${ClassName}All();
        }
        List<Ztree> ztrees = ${className}Service.generate${ClassName}TreeDate(${className}List,true);
        return ztrees;
    }
#end
#end

     /**~*/ /**~actionBegin*/
#foreach($action in $actions)
#set($ActionName=$action.actionName.substring(0,1).toUpperCase() + ${action.actionName.substring(1)})
#if($action.isView)
     /**
     * 转到${action.actionComment}
     */
    @GetMapping("/to${ActionName}/{${pkColumn.javaField}}")
    public String to${ActionName}(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}, ModelMap mmap)
    {
        ${ClassName} ${className} = ${className}Service.select${ClassName}ById(${pkColumn.javaField});
        mmap.put("${className}", ${className});
        return prefix + "/to${ActionName}";
    }
#end
#if($action.mouldName=="Unique")
     /**
     * ${action.actionComment}
     */
     @RequiresPermissions("${permissionPrefix}:${action.actionName}")
     @Log(title = "${functionName}", businessType = BusinessType.OTHER)
     @PostMapping("/${action.actionName}")
     @ResponseBody
     public String ${action.actionName}(${ClassName} ${className})
     {
        return ${className}Service.${action.actionName}(${className});
     }/**~${action.actionName}*/
#else
     /**
     * ${action.actionComment}
     */
     @RequiresPermissions("${permissionPrefix}:${action.actionName}")
     @Log(title = "${functionName}", businessType = BusinessType.OTHER)
     @PostMapping("/${action.actionName}")
     @ResponseBody
     public AjaxResult ${action.actionName}(${ClassName} ${className})
     {
         return toAjax(${className}Service.${action.actionName}(${className}));
     }/**~${action.actionName}*/
#end
#end

#else

#end
}
